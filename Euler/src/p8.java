//Done 23514624000
public class p8 {

	public static void main(String[] args) {
		int arr[][] = {
{7,3,1,6,7,1,7,6,5,3,1,3,3,0,6,2,4,9,1,9,2,2,5,1,1,9,6,7,4,4,2,6,5,7,4,7,4,2,3,5,5,3,4,9,1,9,4,9,3,4},
{9,6,9,8,3,5,2,0,3,1,2,7,7,4,5,0,6,3,2,6,2,3,9,5,7,8,3,1,8,0,1,6,9,8,4,8,0,1,8,6,9,4,7,8,8,5,1,8,4,3},
{8,5,8,6,1,5,6,0,7,8,9,1,1,2,9,4,9,4,9,5,4,5,9,5,0,1,7,3,7,9,5,8,3,3,1,9,5,2,8,5,3,2,0,8,8,0,5,5,1,1},
{1,2,5,4,0,6,9,8,7,4,7,1,5,8,5,2,3,8,6,3,0,5,0,7,1,5,6,9,3,2,9,0,9,6,3,2,9,5,2,2,7,4,4,3,0,4,3,5,5,7},
{6,6,8,9,6,6,4,8,9,5,0,4,4,5,2,4,4,5,2,3,1,6,1,7,3,1,8,5,6,4,0,3,0,9,8,7,1,1,1,2,1,7,2,2,3,8,3,1,1,3},
{6,2,2,2,9,8,9,3,4,2,3,3,8,0,3,0,8,1,3,5,3,3,6,2,7,6,6,1,4,2,8,2,8,0,6,4,4,4,4,8,6,6,4,5,2,3,8,7,4,9},
{3,0,3,5,8,9,0,7,2,9,6,2,9,0,4,9,1,5,6,0,4,4,0,7,7,2,3,9,0,7,1,3,8,1,0,5,1,5,8,5,9,3,0,7,9,6,0,8,6,6},
{7,0,1,7,2,4,2,7,1,2,1,8,8,3,9,9,8,7,9,7,9,0,8,7,9,2,2,7,4,9,2,1,9,0,1,6,9,9,7,2,0,8,8,8,0,9,3,7,7,6},
{6,5,7,2,7,3,3,3,0,0,1,0,5,3,3,6,7,8,8,1,2,2,0,2,3,5,4,2,1,8,0,9,7,5,1,2,5,4,5,4,0,5,9,4,7,5,2,2,4,3},
{5,2,5,8,4,9,0,7,7,1,1,6,7,0,5,5,6,0,1,3,6,0,4,8,3,9,5,8,6,4,4,6,7,0,6,3,2,4,4,1,5,7,2,2,1,5,5,3,9,7},
{5,3,6,9,7,8,1,7,9,7,7,8,4,6,1,7,4,0,6,4,9,5,5,1,4,9,2,9,0,8,6,2,5,6,9,3,2,1,9,7,8,4,6,8,6,2,2,4,8,2},
{8,3,9,7,2,2,4,1,3,7,5,6,5,7,0,5,6,0,5,7,4,9,0,2,6,1,4,0,7,9,7,2,9,6,8,6,5,2,4,1,4,5,3,5,1,0,0,4,7,4},
{8,2,1,6,6,3,7,0,4,8,4,4,0,3,1,9,9,8,9,0,0,0,8,8,9,5,2,4,3,4,5,0,6,5,8,5,4,1,2,2,7,5,8,8,6,6,6,8,8,1},
{1,6,4,2,7,1,7,1,4,7,9,9,2,4,4,4,2,9,2,8,2,3,0,8,6,3,4,6,5,6,7,4,8,1,3,9,1,9,1,2,3,1,6,2,8,2,4,5,8,6},
{1,7,8,6,6,4,5,8,3,5,9,1,2,4,5,6,6,5,2,9,4,7,6,5,4,5,6,8,2,8,4,8,9,1,2,8,8,3,1,4,2,6,0,7,6,9,0,0,4,2},
{2,4,2,1,9,0,2,2,6,7,1,0,5,5,6,2,6,3,2,1,1,1,1,1,0,9,3,7,0,5,4,4,2,1,7,5,0,6,9,4,1,6,5,8,9,6,0,4,0,8},
{0,7,1,9,8,4,0,3,8,5,0,9,6,2,4,5,5,4,4,4,3,6,2,9,8,1,2,3,0,9,8,7,8,7,9,9,2,7,2,4,4,2,8,4,9,0,9,1,8,8},
{8,4,5,8,0,1,5,6,1,6,6,0,9,7,9,1,9,1,3,3,8,7,5,4,9,9,2,0,0,5,2,4,0,6,3,6,8,9,9,1,2,5,6,0,7,1,7,6,0,6},
{0,5,8,8,6,1,1,6,4,6,7,1,0,9,4,0,5,0,7,7,5,4,1,0,0,2,2,5,6,9,8,3,1,5,5,2,0,0,0,5,5,9,3,5,7,2,9,7,2,5},
{7,1,6,3,6,2,6,9,5,6,1,8,8,2,6,7,0,4,2,8,2,5,2,4,8,3,6,0,0,8,2,3,2,5,7,5,3,0,4,2,0,7,5,2,9,6,3,4,5,0}};

		int maxCombo  = 0,
			lowestNum = 0;
		int ret[] = new int [2];
		
		for(int i = 0; i < 50; i++){
			for(int j = 0; j < 20; j++){
				//best path
				ret = bestPath(arr, i, j, lowestNum);
				
				if(maxCombo < ret[0]){
					maxCombo  = ret[0];
					lowestNum = ret[1]; 
				}
			}
		}
	}
	
	public static int[] bestPath(int arr[][], int y, int x, int floor){
		int pathX[] = new int[13];
		int pathY[] = new int[13];
		int combo  = arr[x][y];
		int lowest = 0;
		int length = 1;
		int dir, tmp;
		boolean bad = false;
		
		pathX[0] = x;
		pathY[0] = y;
		
		for(int i = 1; i < 13; i++){
			//find best direction to go
			dir = bestDir(arr, x, y);
			
			//0 = left, 1 = right, 2 = up, 3 = down, 4 = deadEnd
			if(dir == 0)
				x--;
			else if(dir == 1)
				x++;
			else if(dir == 2)
				y--;
			else if(dir == 3)
				y++;
			else
				break;
			
			tmp = arr[x][y];
			
			//make sure the path is good
			//bigger or equal to smallest val in best path
			if(tmp < floor)
				break;
			//make sure point hasnt been visited
			for(int k = 0; k < length; k++){
				if(pathX[k] == x && pathY[k] == y){
					bad = true;
					break;
				}
			}
			if(bad)
				break;
			
			//good value, add it
			pathX[length] = x;
			pathY[length] = y;
			combo *= tmp;
			length++;
		}
		int [] ret2 = {combo, lowest}; 
		return ret2;
	}
	
	public static int bestDir(int arr[][], int x, int y){
		int l,r,u,d;
		if(x > 1)
			l = arr[x-1][y];
		else
			l = -1;
		if(x < 19)
			r = arr[x+1][y];
		else
			r = -1;
		if(y > 1)
			u = arr[x][y-1];
		else 
			u = -1;
		if(y < 49)
			d = arr[x][y+1];
		else 
			d = -1;
		
		if(l >= r && l >= u && l >= d){
			if(l == r && r > u && r > d){
		//		if(bestDir() >)
			}
	//		else
		}
		return 0;
	}

}
